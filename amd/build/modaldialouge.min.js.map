{"version":3,"file":"modaldialouge.min.js","sources":["../src/modaldialouge.js"],"sourcesContent":["import ModalFactory from 'core/modal_factory';\r\nimport {call as ajaxCall} from 'core/ajax';\r\nimport Templates from 'core/templates';\r\nimport {add as addToast} from 'core/toast';\r\nimport {get_string as getString} from 'core/str';\r\n\r\nconst addNotification = (msg, type) => {\r\n    addToast(msg, {type: type});\r\n};\r\n\r\nexport const init = (linkSelector, title, own = true) => {\r\n    document.querySelector(linkSelector).addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        ajaxCall([{\r\n            methodname: 'local_tickets_get_tickets', \r\n            args: {'own': own},\r\n            done: async function(response) {\r\n                if(response.status == 200){\r\n                    const tickets = JSON.parse(response.data);\r\n                    const modal = await ModalFactory.create({\r\n                        large: true,\r\n                        title: title,\r\n                        body: Templates.render('local_tickets/modaldialouge', {tickets: tickets}),\r\n                    });\r\n                    \r\n                    require(['local_tickets/deletepopup'], function(deletepopup) {\r\n                        deletepopup.init();\r\n                    });\r\n\r\n                    modal.show();\r\n                }\r\n                else{\r\n                    addNotification(response.message, 'danger');\r\n                }\r\n            },\r\n            fail: function(ex) {\r\n                addNotification(`Failed to fetch ticket: ${ex}`, 'danger');\r\n                console.log(ex);\r\n            }\r\n        }])\r\n    });\r\n};\r\n"],"names":["addNotification","msg","type","linkSelector","title","own","document","querySelector","addEventListener","e","preventDefault","methodname","args","done","async","response","status","tickets","JSON","parse","data","modal","ModalFactory","create","large","body","Templates","render","require","deletepopup","init","show","message","fail","ex","console","log"],"mappings":"ocAMMA,gBAAkB,CAACC,IAAKC,uBACjBD,IAAK,CAACC,KAAMA,sBAGL,SAACC,aAAcC,WAAOC,+DACtCC,SAASC,cAAcJ,cAAcK,iBAAiB,SAAUC,IAC5DA,EAAEC,gCACO,CAAC,CACNC,WAAY,4BACZC,KAAM,KAAQP,KACdQ,KAAMC,eAAeC,aACK,KAAnBA,SAASC,OAAc,OAChBC,QAAUC,KAAKC,MAAMJ,SAASK,MAC9BC,YAAcC,uBAAaC,OAAO,CACpCC,OAAO,EACPpB,MAAOA,MACPqB,KAAMC,mBAAUC,OAAO,8BAA+B,CAACV,QAASA,YAGpEW,QAAQ,CAAC,8BAA8B,SAASC,aAC5CA,YAAYC,UAGhBT,MAAMU,YAGN/B,gBAAgBe,SAASiB,QAAS,WAG1CC,KAAM,SAASC,IACXlC,kDAA2CkC,IAAM,UACjDC,QAAQC,IAAIF"}